#!/bin/python3

import dataclasses
import datetime
import functools
import json
import os.path
from typing import Optional

MANIFEST_VARIANTS = os.path.join(
    os.path.abspath(os.path.dirname(__file__)),
    'ext', 'manifest.json',
)


@dataclasses.dataclass
class Version:
    year: str
    month: str
    day: str
    revision: str

    def as_str(self):
        return '.'.join(dataclasses.astuple(self))

    @classmethod
    def from_str(cls, string: str):
        return cls(*string.split('.'))

    def __eq__(self, other):
        return (
                self.year == other.year
                and self.month == other.month
                and self.day == other.day
        )

    def bump_rev(self):
        self.revision = str(int(self.revision) + 1)
        return self


@functools.cache
def today_date():
    return datetime.date.today()


def make_new_version() -> Version:
    return Version(
        str(today_date().year)[-2:],
        str(today_date().month),
        str(today_date().day),
        '0'
    )


def increase_ver_num(old_version: Version) -> Version:
    new_version = make_new_version()
    if old_version == new_version:
        new_version = old_version.bump_rev()
    return new_version


def find_old_version() -> Optional[Version]:
    try:
        with open(MANIFEST_VARIANTS, encoding='utf8') as f:
            data = json.load(f)
        return Version.from_str(data['version'])
    except (FileNotFoundError, TypeError, KeyError, json.JSONDecodeError):
        return None


def main():
    old_version = find_old_version()
    new_version = increase_ver_num(old_version) if old_version else make_new_version()
    print(new_version.as_str())


if __name__ == '__main__':
    main()
